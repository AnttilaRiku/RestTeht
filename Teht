const mysql = require('mysql2/promise');
const express = require('express');
const bcrypt = require('bcrypt');
require('dotenv').config();

const app = express();
app.use(express.json()); // Parse JSON requests

const conf = {
    host: process.env.DB_HOST,
    user: process.env.DB_USERNAME,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_DATABASE,
};

// Start server
app.use(express.static('public'));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

const PORT = process.env.PORT || 3001;

app.listen(PORT, () => {
    console.log('Server is running properly on port: ' + PORT);
});


//Posting products Via postman console to the database.
app.post('/products', async (req, resp) => {
    console.log('Received Request Body:', req.body);
    try {
        const con = await mysql.createConnection(conf);

        const { product_name, price, category } = req.body;

        // Perform the INSERT operation
        const [rows] = await con.execute('INSERT INTO product (product_name, price, category) VALUES (?, ?, ?)', [product_name, price, category]);

        resp.status(201).json({ message: 'Product created successfully' });
    } catch (error) {
        console.log(error);
        resp.status(500).send(error.message);
    }
});


// GET endpoint for /products
app.get('/products', async (req, resp) => {
    try {
        const con = await mysql.createConnection(conf);

        // Handle the case where id might be undefined ---> Just simply selects all products.
        const id = req.query.id || null;
        const sql = id ? 'SELECT * FROM product WHERE id=?' : 'SELECT * FROM product';

        const [rows] = await con.execute(sql, [id]);
        resp.status(200).json(rows);
    } catch (error) {
        console.log(error);
        resp.status(500).send(error.message);
    }
});

// GET endpoint for /product category
app.get('/categories', async (req, resp) => {
    try {
        const con = await mysql.createConnection(conf);

        // Handle the case where id might be undefined ---> Just simply selects all products.
        const id = req.query.id || null;
        const sql = id === null ? 'SELECT * FROM product_category' : 'SELECT * FROM product_category WHERE id = ?';

        const [rows] = await con.execute(sql, [id]);
        resp.status(200).json(rows);
    } catch (error) {
        console.log(error);
        resp.status(500).send(error.message);
    }
});




// User Registration

// Registering user to Customer database

// POST
const pool = mysql.createPool(conf);

app.post('/register', async (req, resp) => {
    try {
        console.log('Received POST request to /register');

        const { fname, lname, uname, pw } = req.body;
        console.log('Received Request Body:', req.body);

        // Hash the password
        const saltRounds = 10;
        const hashedPassword = await bcrypt.hash(pw, saltRounds);

        if (!hashedPassword) {
            console.error('Error hashing the password');
            resp.status(500).json({ error: 'Internal Server Error' });
            return;
        } else {
            console.log('Password hashed successfully:', hashedPassword);
        }

        // Insert user into the database using a connection from the pool
        const sql = 'INSERT INTO customer (first_name, last_name, username, pw) VALUES (?, ?, ?, ?)';
        const values = [fname, lname, uname, hashedPassword || null];

        console.log('Executing SQL query:', sql);
        console.log('SQL query parameters:', values);

        const [result] = await pool.execute(sql, values);

        console.log('User inserted into the database:', result);

        resp.status(201).json({ message: 'User created successfully', insertedId: result.insertId });
    } catch (error) {
        console.error('Error during user registration:', error);
        resp.status(500).json({ error: 'Internal Server Error', details: error.message });
    }
});

// GET
app.get('/register', (req, res) => {
    console.log('Received GET request to /register');
    res.status(404).send(":DD");
});

